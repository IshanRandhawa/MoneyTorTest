{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [],
   "source": [
    "#question 1\n",
    "#given constraints of 1,10 not taking care of case where 0 is present\n",
    "#base answer\n",
    "def power(a,b):\n",
    "    return a**b\n",
    "#implemented recursively\n",
    "def power2(a,b):\n",
    "    if b == 1:\n",
    "        return a\n",
    "    return a*(power(a,b-1))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "100000000000000000000"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "power2(10,20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "#question2\n",
    "#given time complexity is O(nlogn) the obvious case is to sort it and then add the unique elements to the front of the array and increase pointer\n",
    "def removeduplicate(arr):\n",
    "    arr.sort()\n",
    "    index = 1\n",
    "    for i in range(1, len(arr)):\n",
    "        if arr[i] != arr[i - 1]:\n",
    "            arr[index] = arr[i]\n",
    "            index += 1    \n",
    "    return arr[:index]\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[1, 2, 3, 4, 5, 6, 7]"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "removeduplicate([1,2,3,4,4,2,1,5,1,4,5,2,2,1,5,6,7,3])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [],
   "source": [
    "# question3 base answers shouldn't use because of large constraints\n",
    "def printfib1(n):\n",
    "    arr = [0]*n\n",
    "    arr[0],arr[1] = 0,1\n",
    "    for i in range(2,n):\n",
    "        arr[i] = arr[i-1] + arr[i-2]\n",
    "    print(arr)\n",
    "#if we don't want to save the previous results we can just use 2 variables to keep count of the last 2 numbers because contraints are too large to keep a list in memory\n",
    "def printfib2(n):\n",
    "    f1,f2 = 0,1\n",
    "    if n >= 0:\n",
    "        print(0)\n",
    "    if n >= 1:\n",
    "        print(1)\n",
    "    for i in range(2,n):\n",
    "        f3 = f2 + f1\n",
    "        f1 = f2\n",
    "        f2 = f3\n",
    "        print(f3)    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
